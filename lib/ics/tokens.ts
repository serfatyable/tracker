/**
 * ICS Calendar Token Utilities
 *
 * Utilities for generating and managing secure calendar subscription tokens.
 * Tokens are used for calendar apps (Google Calendar, Apple Calendar, etc.)
 * that cannot send Authorization headers.
 *
 * SECURITY: Tokens are long, random, and stored in user settings
 */

import { randomBytes } from 'crypto';

/**
 * Generate a cryptographically secure calendar token
 *
 * Tokens are 32 bytes (256 bits) of randomness, encoded as hex (64 characters)
 * This provides sufficient entropy to prevent brute force attacks
 *
 * @returns A 64-character hex string
 *
 * @example
 * ```typescript
 * const token = generateCalendarToken();
 * // Returns: "a1b2c3d4e5f6...64 chars total"
 * ```
 */
export function generateCalendarToken(): string {
  // 32 bytes = 256 bits of entropy
  // Encoded as hex = 64 characters
  const buffer = randomBytes(32);
  return buffer.toString('hex');
}

/**
 * Validate calendar token format
 * Tokens must be exactly 64 hex characters
 *
 * @param token - Token to validate
 * @returns True if token format is valid
 */
export function isValidTokenFormat(token: string | null | undefined): boolean {
  if (!token) return false;

  // Must be exactly 64 characters
  if (token.length !== 64) return false;

  // Must be valid hex
  return /^[0-9a-f]{64}$/i.test(token);
}

/**
 * Generate a secure hash of a token for storage
 *
 * Note: For this implementation, we store tokens in plaintext
 * in Firestore since they need to be looked up by value.
 *
 * Alternative: Store hashed tokens and use a tokenâ†’uid index
 * (future enhancement if needed)
 */
export function hashToken(token: string): string {
  // For now, return token as-is
  // Future: Implement SHA-256 hashing if needed
  return token;
}

/**
 * Token security best practices:
 *
 * 1. Length: 64 characters (256 bits of entropy)
 *    - Prevents brute force: 2^256 possible values
 *    - At 1 billion attempts/second, would take longer than age of universe
 *
 * 2. Randomness: crypto.randomBytes() uses OS-level CSPRNG
 *    - Not predictable or guessable
 *
 * 3. Rotation: Tokens can be regenerated by user
 *    - If token is compromised, user can generate new one
 *
 * 4. Rate Limiting: Applied at endpoint level (see Task #1)
 *    - Even if token leaked, limited to 100 requests/hour per IP
 *
 * 5. Scope: Each token is user-specific
 *    - Token only grants access to that user's calendar data
 */
